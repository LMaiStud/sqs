name: Java CI with Maven and React

permissions:
  contents: read
  packages: write

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Lint Backend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./backend/src/main/java/com/sqs_maier/docker/Dockerfile.jvm

      - name: Lint Frontend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./frontend/Dockerfile

  setup-java:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Verify Java Version
        run: java -version

  build-backend:
    runs-on: ubuntu-latest
    needs: setup-java

    steps:
      - uses: actions/checkout@v3

      - name: Build backend with Maven
        run: mvn -B package --file backend/pom.xml

  sonar-backend:
    runs-on: ubuntu-latest
    needs: build-backend

    steps:
      - uses: actions/checkout@v3

      - name: Run SonarCloud Analysis for Backend
        working-directory: backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify sonar:sonar -Dsonar.projectKey=sqsprojekt_backend -Dsonar.organization=sqsprojekt -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }}

  build-frontend:
    runs-on: ubuntu-latest
    needs: sonar-backend

    steps:
      - uses: actions/checkout@v3

      - name: Build frontend with npm
        working-directory: frontend
        run: |
          npm install
          npm run build

  sonar-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend

    steps:
      - uses: actions/checkout@v3

      - name: Run SonarCloud Analysis for Frontend
        working-directory: frontend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: npx sonar-scanner -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }}

  prepare-env:
    runs-on: ubuntu-latest
    needs: sonar-frontend

    steps:
      - uses: actions/checkout@v3

      - name: Prepare lowercase variables
        run: echo "LOWER_REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

  docker-login:
    runs-on: ubuntu-latest
    needs: prepare-env

    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

  build-push-docker-backend:
    runs-on: ubuntu-latest
    needs: docker-login

    steps:
      - uses: actions/checkout@v3

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: ./backend/src/main/java/com/sqs_maier/docker/Dockerfile.jvm
          push: true
          tags: ghcr.io/${{ env.LOWER_REPO_NAME }}/sqs_backend:latest

  build-push-docker-frontend:
    runs-on: ubuntu-latest
    needs: docker-login

    steps:
      - uses: actions/checkout@v3

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ghcr.io/${{ env.LOWER_REPO_NAME }}/sqs_frontend:latest

  show-containers:
    runs-on: ubuntu-latest
    needs: [build-push-docker-backend, build-push-docker-frontend]

    steps:
      - uses: actions/checkout@v3

      - name: Show Running Containers
        run: docker ps

  stop-remove-containers:
    runs-on: ubuntu-latest
    needs: show-containers

    steps:
      - uses: actions/checkout@v3

      - name: Stop and remove any running containers
        run: |
          docker ps -q | xargs docker stop
          docker ps -aq | xargs docker rm

  start-docker-compose:
    runs-on: ubuntu-latest
    needs: stop-remove-containers

    steps:
      - uses: actions/checkout@v3

      - name: Start Docker Compose
        run: docker-compose -f ./docker-compose.yml up -d

      - name: Wait for services to start
        run: sleep 15

  update-artillery:
    runs-on: ubuntu-latest
    needs: start-docker-compose

    steps:
      - uses: actions/checkout@v3

      - name: Update Artillery Script with Host Port
        run: sed -i "s/\${host_port}/8080/g" artillery-tests/artillery.yml

  run-artillery:
    runs-on: ubuntu-latest
    needs: update-artillery

    steps:
      - uses: actions/checkout@v3

      - name: Run Artillery Tests
        if: success()
        run: |
          npm install -g artillery
          artillery run artillery-tests/artillery.yml

  build-playwright:
    runs-on: ubuntu-latest
    needs: run-artillery

    steps:
      - uses: actions/checkout@v3

      - name: Build playwright with npm
        working-directory: playwright
        run: |
          npm ci

  install-playwright-browsers:
    runs-on: ubuntu-latest
    needs: build-playwright

    steps:
      - uses: actions/checkout@v3

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

  run-playwright:
    runs-on: ubuntu-latest
    needs: install-playwright-browsers

    steps:
      - uses: actions/checkout@v3

      - name: Run Playwright Frontendtests
        run: |
          cd playwright
          npx playwright test --config playwright.config.js
